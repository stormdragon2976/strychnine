#!/bin/bash

# Configures .ratpoisonrc.
# Written by Storm Dragon
# Released under the therms of the unlicense http://unlicense.org

# Gloabal Variables
true=0
false=1

# Get user input args are return variable, question, options
get_input()
{
# Variable names are long, cause I want absolutely no name conflicts.
local __get_input_input=$1
shift
local __get_input_question="$1"
shift
local __get_input_answer=""
local __get_input_i=""
local __get_input_continue=false
for __get_input_i in $@; do
if [ "${__get_input_i:0:1}" = "-" ]; then
local __get_input_default="${__get_input_i:1}"
fi
done
while [ $__get_input_continue = false ]; do
echo -n "$__get_input_question (${@/#-/}) "
if [ -n "$__get_input_default" ]; then
read -e -i "$__get_input_default" __get_input_answer
else
read -e __get_input_answer
fi
for __get_input_i in $@; do
if [ "$__get_input_answer" = "${__get_input_i/#-/}" ]; then
__get_input_continue=true
break
fi
done
done
eval $__get_input_input="'$__get_input_answer'"
}

add_setting()
{
if [ -z "$rc" ]; then
rc="$@"
else
rc="${rc}"$'\n'"$@"
fi
}

# Make sure rc variable is empty
unset rc
# Set  path for helper scripts.
path="$(readlink -f $0)"
path="${path%/*}"
add_setting "# Generated by strychnine (${0##*/}) http://github.com/stormdragon2976/strychnine"$'\n'$'\n'"# Miscellaneous"
add_setting startup_message off

# Unbind existing keys that lead to inaccessible things like xterm or keys that user wants to change:
add_setting $'\n'"# Unbind section"
add_setting unbind c
read -p "Enter desired escape key, you can use f1-f12 or capslock too: c-" -e -i t escapeKey
if [ -z "$escapeKey" ]; then
escapeKey="t"
fi
if [ ${#escapeKey} -gt 1 ]; then
escapeKey="${escapeKey,,}"
fi
if [ "$escapeKey" != "t" ]; then
add_setting unbind t
fi

# Key binding section
add_setting $'\n'"# Key binding section"
# Key binding section
if [ ${#escapeKey} -eq 1 ]; then
if [ "$escapeKey" != "t" ]; then
add_setting escape c-$escapeKey
fi
fi
if [[ "$escapeKey" =~ ^f[1-9]+$ ]]; then
add_setting escape ${escapeKey^^}
fi
add_setting "# Alt+tab switches through open windows"
add_setting definekey top M-Tab next
add_setting definekey top M-ISO_Left_Tab prev
add_setting bind F1 exec ${path}/shortcut-key-dialog
add_setting bind F2 ${path}/run-dialog
# Figure out which terminal emulator to use:
unset programList
for i in gnome-terminal mate-terminal -lxterminal ; do
if hash ${i/#-/} &> /dev/null ; then
if [ -n "$programList" ]; then
programList="$programList $i"
else
programList="$i"
fi
fi
done
if [ -z "$programList" ]; then
die "No terminal emulator found, please install one of gnome-terminal, mate-terminal, or lxterminal."
fi
if [ "$programList" != "${programList// /}" ]; then
get_input terminal "Please select a terminal emulator:" $programList
else
terminal="${programList/#-/}"
fi
# Configure music player
unset programList
for i in cmus mopity mpc -xmms2 ; do
if hash ${i/#-/} &> /dev/null ; then
if [ -n "$programList" ]; then
programList="$programList $i"
else
programList="$i"
fi
fi
done
if [ "$programList" != "${programList// /}" ]; then
get_input musicPlayer "Please select a music player:" $programList
else
musicPlayer="${programList/#-/}"
fi
if [ -n "$musicPlayer" ]; then musicPlayer="/usr/bin/$musicPlayer"
fi
echo "$musicPlayer"
add_setting bind c /usr/bin/$terminal
add_setting bind O /usr/bin/orca -r

# Autostart section
add_setting $'\n'"# Autostart section"
if hash rpws ; then
get_input workspaces "Select desired number of workspaces:" {1..3} -4 {5..8}
if [ $workspaces -gt 1 ]; then
add_setting exec /usr/bin/rpws init $workspaces -k
fi
fi
# Additional startup programs
echo "Enter any programs you want started automatically separated by spaces:"
read -e -i "/usr/bin/orca " programs
if [ -n "$programs" ]; then
for i in $programs ; do
if hash ${i##*/} &> /dev/null ; then
add_setting exec $i
else
echo "$i was not found."
fi
done
fi
echo "$rc"
exit 0
